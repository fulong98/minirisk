version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ENV=development
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=minirisk
      - DB_PASSWORD=123321
      - DB_NAME=minirisk
      - MARKET_DATA_API_KEY=${MARKET_DATA_API_KEY}
      - MARKET_DATA_API_URL=${MARKET_DATA_API_URL}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./backend:/app
    depends_on:
      mysql:
        condition: service_healthy # Wait for mysql healthcheck to pass
    networks:
      - minirisk-network

  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123321
      - MYSQL_DATABASE=minirisk
      - MYSQL_USER=minirisk
      - MYSQL_PASSWORD=123321
    volumes:
      - mysql-data:/var/lib/mysql
      - ./database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Give MySQL time to initialize
    networks:
      - minirisk-network

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "3000:80" # Map host 3000 to container 80 (Nginx default)
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    # Volumes removed as they interfere with serving the static build from the image
    depends_on:
      - api
    networks:
      - minirisk-network

volumes:
  mysql-data:

networks:
  minirisk-network:
    driver: bridge
